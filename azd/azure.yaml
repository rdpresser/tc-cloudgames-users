name: tc-cloudgames-users-api
metadata:
  template: tc-cloudgames-users-api@1.0.0
  
services:
  users-api:
    project: ../src/Adapters/Inbound/TC.CloudGames.Users.Api
    language: dotnet
    host: containerapp
    
    # Tags for resource management and cost tracking
    tags:
      Environment: "{{ .Env.AZURE_ENVIRONMENT }}"
      Project: "TC Cloud Games"
      ManagedBy: "AZD"
      Owner: "DevOps Team"
      CostCenter: "Engineering"
      Service: "Users API"
    
    # Docker configuration
    docker:
      path: ../src/Adapters/Inbound/TC.CloudGames.Users.Api/Dockerfile
      context: ../src/Adapters/Inbound/TC.CloudGames.Users.Api
      
    # Container App specific configuration
    options:
      containerapp:
        ingress:
          external: true
          targetPort: 8080
          transport: http
          allowInsecure: false
        secrets:
          # Database secrets (matching Terraform Key Vault secrets)
          - name: db-host
            keyVaultUrl: https://{{ .Env.AZURE_KEY_VAULT_NAME }}.vault.azure.net/secrets/db-host
          - name: db-port
            keyVaultUrl: https://{{ .Env.AZURE_KEY_VAULT_NAME }}.vault.azure.net/secrets/db-port
          - name: db-name-users
            keyVaultUrl: https://{{ .Env.AZURE_KEY_VAULT_NAME }}.vault.azure.net/secrets/db-name-users
          - name: db-admin-login
            keyVaultUrl: https://{{ .Env.AZURE_KEY_VAULT_NAME }}.vault.azure.net/secrets/db-admin-login
          - name: db-password
            keyVaultUrl: https://{{ .Env.AZURE_KEY_VAULT_NAME }}.vault.azure.net/secrets/db-password
          # Redis cache secrets (matching Terraform Key Vault secrets)
          - name: cache-host
            keyVaultUrl: https://{{ .Env.AZURE_KEY_VAULT_NAME }}.vault.azure.net/secrets/cache-host
          - name: cache-port
            keyVaultUrl: https://{{ .Env.AZURE_KEY_VAULT_NAME }}.vault.azure.net/secrets/cache-port
          - name: cache-password
            keyVaultUrl: https://{{ .Env.AZURE_KEY_VAULT_NAME }}.vault.azure.net/secrets/cache-password
          # Service Bus secrets (matching Terraform Key Vault secrets)
          - name: servicebus-namespace
            keyVaultUrl: https://{{ .Env.AZURE_KEY_VAULT_NAME }}.vault.azure.net/secrets/servicebus-namespace
        env:
          # Database environment variables (individual components)
          - name: DB_HOST
            secretRef: db-host
          - name: DB_PORT
            secretRef: db-port
          - name: DB_NAME
            secretRef: db-name-users
          - name: DB_USER
            secretRef: db-admin-login
          - name: DB_PASSWORD
            secretRef: db-password
          # Redis cache environment variables (individual components)
          - name: CACHE_HOST
            secretRef: cache-host
          - name: CACHE_PORT
            secretRef: cache-port
          - name: CACHE_PASSWORD
            secretRef: cache-password
          # Service Bus environment variables
          - name: SERVICEBUS_NAMESPACE
            secretRef: servicebus-namespace
          # Static environment variables
          - name: ASPNETCORE_ENVIRONMENT
            value: Production
          - name: ASPNETCORE_URLS
            value: http://+:8080
        scale:
          minReplicas: 0
          maxReplicas: 10
          rules:
            - name: http-scale-rule
              http:
                concurrentRequests: 10
        resources:
          cpu: 0.25
          memory: 0.5Gi
        identity:
          type: SystemAssigned

# Infrastructure configuration
# Since infrastructure is managed by Terraform (foundation), 
# AZD will only handle application deployment to existing resources
# Comment out infra section to prevent conflicts with Terraform
# infra:
#   provider: bicep
#   path: ./infra

# Hooks for additional configuration
hooks:
  postdeploy:
    shell: sh
    run: |
      echo "üîß Configuring Container App post-deployment..."
      
      # Get Container App name (created by AZD)
      CONTAINER_APP_NAME=$(az containerapp list \
        --resource-group $AZURE_RESOURCE_GROUP \
        --query "[?contains(name, 'users-api')].name" -o tsv)
      
      echo "üìù Container App: $CONTAINER_APP_NAME"
      
      # Get the System Managed Identity principal ID
      PRINCIPAL_ID=$(az containerapp identity show \
        --name $CONTAINER_APP_NAME \
        --resource-group $AZURE_RESOURCE_GROUP \
        --query "principalId" -o tsv)
      
      echo "üÜî System MI Principal ID: $PRINCIPAL_ID"
      
      # Grant Key Vault Secrets User role to System MI (idempotent)
      echo "üîê Ensuring Key Vault access..."
      if az role assignment list --assignee $PRINCIPAL_ID --role "Key Vault Secrets User" --scope "/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$AZURE_RESOURCE_GROUP/providers/Microsoft.KeyVault/vaults/$AZURE_KEY_VAULT_NAME" --query "[0].id" -o tsv | grep -q "roleAssignments"; then
        echo "‚úÖ Key Vault role assignment already exists"
      else
        az role assignment create \
          --assignee $PRINCIPAL_ID \
          --role "Key Vault Secrets User" \
          --scope "/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$AZURE_RESOURCE_GROUP/providers/Microsoft.KeyVault/vaults/$AZURE_KEY_VAULT_NAME" \
          --only-show-errors \
          --query "id" -o tsv
        echo "‚úÖ Key Vault role assignment created"
      fi
      
      # Grant ACR Pull role for container image access (idempotent)
      echo "üì¶ Ensuring ACR access..."
      if az role assignment list --assignee $PRINCIPAL_ID --role "AcrPull" --scope "/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$AZURE_RESOURCE_GROUP/providers/Microsoft.ContainerRegistry/registries/$AZURE_CONTAINER_REGISTRY_NAME" --query "[0].id" -o tsv | grep -q "roleAssignments"; then
        echo "‚úÖ ACR role assignment already exists"
      else
        az role assignment create \
          --assignee $PRINCIPAL_ID \
          --role "AcrPull" \
          --scope "/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$AZURE_RESOURCE_GROUP/providers/Microsoft.ContainerRegistry/registries/$AZURE_CONTAINER_REGISTRY_NAME" \
          --only-show-errors \
          --query "id" -o tsv
        echo "‚úÖ ACR role assignment created"
      fi
      
      echo "‚úÖ Post-deployment configuration completed!"
      echo "üîë Container App has System Managed Identity access to Key Vault and ACR"
      echo "üöÄ Application ready for production traffic!"
