name: 🚀 Users API CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    types: [closed]
    paths:
      - 'services/users/**'
      - '.github/workflows/**'
      - 'azd/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        default: 'dev-rodrigo'
        type: choice
        options:
          - dev-rodrigo

env:
  SERVICE_NAME: users-api
  SOLUTION_PATH: services/users/TC.CloudGames.Users.sln
  SOLUTION_FILE: TC.CloudGames.Users.sln
  SERVICE_PATH: services/users
  DOCKERFILE_PATH: services/users/src/Adapters/Inbound/TC.CloudGames.Users.Api/Dockerfile
  WORKSPACE_PATH: tc-cloudgames-solution/services/users

jobs:
  check-trigger:
    name: 🔍 Validate Deployment Trigger
    if: (github.event.pull_request.merged == true) || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: ✅ Check deployment trigger
        id: check
        run: |
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "🚀 Deployment triggered by: ${{ github.event_name }}"

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should-deploy == 'true'
    
    permissions:
      contents: read
      actions: read
      checks: write
      pull-requests: write

    steps:
      - name: 📂 Prepare workspace
        run: mkdir -p ${{ env.WORKSPACE_PATH }}

      - name: 📥 Checkout API repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKSPACE_PATH }}

      - name: 📥 Checkout shared common repository
        uses: actions/checkout@v4
        with:
          repository: rdpresser/tc-cloudgames-common
          path: tc-cloudgames-solution/shared/common
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore ${{ env.WORKSPACE_PATH }}/${{ env.SOLUTION_FILE }}

      - name: 🏗️ Build solution
        run: dotnet build ${{ env.WORKSPACE_PATH }}/${{ env.SOLUTION_FILE }} --no-restore --configuration Release

      - name: 🧪 Run unit tests
        run: |
          dotnet test ${{ env.WORKSPACE_PATH }}/${{ env.SOLUTION_FILE }} \
            --no-build \
            --configuration Release \
            --logger trx \
            --collect:"XPlat Code Coverage" \
            --results-directory ${{ env.WORKSPACE_PATH }}/test-results \
            --verbosity normal

      - name: 📊 Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 🧪 Unit Tests Results
          path: ./test-results/*.trx
          reporter: dotnet-trx
          fail-on-error: true
          working-directory: ${{ env.WORKSPACE_PATH }}

      - name: 📊 Generate & Upload Coverage
        if: always()
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            "-reports:${{ env.WORKSPACE_PATH }}/test-results/**/coverage.cobertura.xml" \
            "-targetdir:${{ env.WORKSPACE_PATH }}/coverage-report" \
            "-reporttypes:Html;Badges;TextSummary" \
            "-verbosity:Info"

      - name: 📈 Upload Coverage Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ github.sha }}
          path: |
            ${{ env.WORKSPACE_PATH }}/coverage-report/
            ${{ env.WORKSPACE_PATH }}/test-results/**/coverage.cobertura.xml
          retention-days: 7

      - name: 📊 Coverage Summary in PR
        if: always()
        run: |
          if [ -f "${{ env.WORKSPACE_PATH }}/coverage-report/Summary.txt" ]; then
            echo "## 📊 Code Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📈 Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat ${{ env.WORKSPACE_PATH }}/coverage-report/Summary.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📋 **Detailed HTML Report**: Download the \`coverage-${{ github.sha }}\` artifact" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report could not be generated. Check test execution." >> $GITHUB_STEP_SUMMARY
          fi

  get-foundation-outputs:
    name: 🔗 Get Foundation Infrastructure
    runs-on: ubuntu-latest
    needs: [check-trigger, unit-tests]
    if: needs.check-trigger.outputs.should-deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'dev-rodrigo' }}

    outputs:
      resource-group: ${{ steps.outputs.outputs.resource-group }}
      acr-name: ${{ steps.outputs.outputs.acr-name }}
      acr-login-server: ${{ steps.outputs.outputs.acr-login-server }}
      key-vault-name: ${{ steps.outputs.outputs.key-vault-name }}
      container-app-env-name: ${{ steps.outputs.outputs.container-app-env-name }}
      environment: ${{ steps.outputs.outputs.environment }}
      azure-environment: ${{ steps.outputs.outputs.azure-environment }}
      azure-subscription-id: ${{ steps.outputs.outputs.azure-subscription-id }}

    steps:
      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🔗 Get Foundation Infrastructure Outputs
        id: outputs
        run: |
          AZURE_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
          GITHUB_ENVIRONMENT="${{ github.event.inputs.environment || 'dev-rodrigo' }}"
          AZURE_ENV_PREFIX=$(echo $GITHUB_ENVIRONMENT | cut -d'-' -f1)
          RESOURCE_GROUP="tc-cloudgames-solution-${AZURE_ENV_PREFIX}-rg"

          ACR_NAME=$(az acr list --resource-group $RESOURCE_GROUP --query "[?starts_with(name, 'tccloudgames${AZURE_ENV_PREFIX}')].name" -o tsv | head -1)
          KEY_VAULT_NAME=$(az keyvault list --resource-group $RESOURCE_GROUP --query "[?starts_with(name, 'tccloudgames${AZURE_ENV_PREFIX}')].name" -o tsv | head -1)
          CONTAINER_APP_ENV_NAME=$(az containerapp env list --resource-group $RESOURCE_GROUP --query "[?starts_with(name, 'tc-cloudgames-${AZURE_ENV_PREFIX}-') && ends_with(name, '-env')].name" -o tsv | head -1)
          ACR_LOGIN_SERVER="${ACR_NAME}.azurecr.io"

          if [ -z "$ACR_NAME" ] || [ -z "$KEY_VAULT_NAME" ] || [ -z "$CONTAINER_APP_ENV_NAME" ]; then
            echo "❌ Missing resources in $RESOURCE_GROUP. Found: ACR=$ACR_NAME, KV=$KEY_VAULT_NAME, ENV=$CONTAINER_APP_ENV_NAME"
            exit 1
          fi

          echo "resource-group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "acr-name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "acr-login-server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "key-vault-name=$KEY_VAULT_NAME" >> $GITHUB_OUTPUT
          echo "container-app-env-name=$CONTAINER_APP_ENV_NAME" >> $GITHUB_OUTPUT
          echo "environment=$GITHUB_ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "azure-environment=$AZURE_ENV_PREFIX" >> $GITHUB_OUTPUT
          echo "azure-subscription-id=$AZURE_SUBSCRIPTION_ID" >> $GITHUB_OUTPUT

  deploy:
    name: 🚀 Deploy Container App
    runs-on: ubuntu-latest
    needs: [check-trigger, unit-tests, get-foundation-outputs]
    if: needs.check-trigger.outputs.should-deploy == 'true'
    environment: ${{ needs.get-foundation-outputs.outputs.environment }}

    outputs:
      container-app-name: ${{ steps.deploy.outputs.container-app-name }}
      container-app-url: ${{ steps.deploy.outputs.container-app-url }}
      image-tag: ${{ steps.build-vars.outputs.image-tag }}
      image-uri: ${{ steps.build-vars.outputs.image-uri }}
      digest: ${{ steps.build-push.outputs.digest }}

    steps:
      - name: 📂 Prepare workspace
        run: mkdir -p ${{ env.WORKSPACE_PATH }}

      - name: 📥 Checkout API repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKSPACE_PATH }}

      - name: 📥 Checkout shared common repository
        uses: actions/checkout@v4
        with:
          repository: rdpresser/tc-cloudgames-common
          path: tc-cloudgames-solution/shared/common
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🏗️ Prepare Build Variables
        id: build-vars
        run: |
          IMAGE_TAG="$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-8)"
          IMAGE_URI="${{ needs.get-foundation-outputs.outputs.acr-login-server }}/${{ env.SERVICE_NAME }}:${IMAGE_TAG}"
          IMAGE_URI_LATEST="${{ needs.get-foundation-outputs.outputs.acr-login-server }}/${{ env.SERVICE_NAME }}:latest"

          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image-uri-latest=$IMAGE_URI_LATEST" >> $GITHUB_OUTPUT

      - name: 🐳 Login to Azure Container Registry
        run: az acr login --name ${{ needs.get-foundation-outputs.outputs.acr-name }}

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build and Push Docker Image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: ./tc-cloudgames-solution
          file: ./tc-cloudgames-solution/${{ env.DOCKERFILE_PATH }}
          push: true
          tags: |
            ${{ steps.build-vars.outputs.image-uri }}
            ${{ steps.build-vars.outputs.image-uri-latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🔍 Verify Image Exists in ACR
        run: |
          IMAGE_URI_LATEST="${{ steps.build-vars.outputs.image-uri-latest }}"
          echo "🔍 Verifying image exists in ACR: $IMAGE_URI_LATEST"
          for i in {1..5}; do
            if az acr repository show-tags \
              --name ${{ needs.get-foundation-outputs.outputs.acr-name }} \
              --repository ${{ env.SERVICE_NAME }} \
              --query "[?contains(@, 'latest')]" -o tsv | grep -q "latest"; then
              echo "✅ Image verified in ACR"
              break
            fi
            echo "⏳ Not found yet, retry $i..."
            sleep 15
          done

      - name: 🚀 Deploy New Image to Container App
        id: deploy
        run: |
          CONTAINER_APP_NAME=$(az containerapp list \
            --resource-group ${{ needs.get-foundation-outputs.outputs.resource-group }} \
            --query "[?contains(name, '${{ env.SERVICE_NAME }}')].name" -o tsv | head -1)

          echo "🚀 Updating $CONTAINER_APP_NAME with image ${{ steps.build-vars.outputs.image-uri-latest }}"
          az containerapp update \
            --name "$CONTAINER_APP_NAME" \
            --resource-group ${{ needs.get-foundation-outputs.outputs.resource-group }} \
            --image "${{ steps.build-vars.outputs.image-uri-latest }}" \
            --output none

          APP_URL=$(az containerapp show \
            --name "$CONTAINER_APP_NAME" \
            --resource-group ${{ needs.get-foundation-outputs.outputs.resource-group }} \
            --query "properties.configuration.ingress.fqdn" -o tsv)

          echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
          echo "container-app-url=https://$APP_URL" >> $GITHUB_OUTPUT

      - name: 🧪 Health Check
        run: |
          HEALTH_URL="${{ steps.deploy.outputs.container-app-url }}/health"
          echo "🏥 Checking health endpoint: $HEALTH_URL"
          sleep 30
          
          for i in {1..3}; do
            if curl -f "$HEALTH_URL" > /dev/null 2>&1; then
              echo "✅ Health check passed!" >> $GITHUB_STEP_SUMMARY
              echo "✅ Health check passed!"
              exit 0
            else
              echo "⏳ Attempt $i failed, retrying..."
              sleep 20
            fi
          done
          
          echo "❌ Health check failed after 3 attempts" >> $GITHUB_STEP_SUMMARY
          echo "❌ Health check failed"
          exit 1

  summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [check-trigger, unit-tests, get-foundation-outputs, deploy]
    if: always() && needs.check-trigger.outputs.should-deploy == 'true'

    steps:
      - name: 📊 Generate Deployment Summary
        run: |
          echo "# 🚀 ${{ env.SERVICE_NAME }} Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ needs.get-foundation-outputs.outputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: \`${{ env.SERVICE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: \`${{ needs.deploy.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Digest**: \`${{ needs.deploy.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Container App**: \`${{ needs.deploy.outputs.container-app-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: [${{ needs.deploy.outputs.container-app-url }}](${{ needs.deploy.outputs.container-app-url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure**: Managed by Terraform 🏗️" >> $GITHUB_STEP_SUMMARY

