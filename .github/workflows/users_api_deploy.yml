name: Deploy Users API

on:
  push:
    branches: [main]
    paths:
      - 'src/Users/**'
      - '.github/workflows/users_api_deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/Users/**'
      - '.github/workflows/users_api_deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  SERVICE_NAME: users-api
  PROJECT_PATH: src/Users

jobs:
  # ==============================================================================
  # BUILD JOB - Build and push container image
  # ==============================================================================
  build:
    name: 🏗️ Build Container Image
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'dev' || 'dev') }}
    
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
      image-uri: ${{ steps.build.outputs.image-uri }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: 🏗️ Build and Push Container Image
        id: build
        run: |
          # Determine environment and set variables
          ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'dev' || 'dev') }}"
          RESOURCE_GROUP="rg-tc-cloudgames-${ENVIRONMENT}"
          ACR_NAME=$(az acr list --resource-group $RESOURCE_GROUP --query "[0].name" -o tsv)
          ACR_LOGIN_SERVER=$(az acr list --resource-group $RESOURCE_GROUP --query "[0].loginServer" -o tsv)
          
          # Generate image tag with timestamp and commit SHA
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          IMAGE_TAG="${TIMESTAMP}-${COMMIT_SHA}"
          IMAGE_URI="${ACR_LOGIN_SERVER}/${SERVICE_NAME}:${IMAGE_TAG}"
          
          echo "🏷️ Image Tag: ${IMAGE_TAG}"
          echo "🐳 Image URI: ${IMAGE_URI}"
          
          # Login to ACR using Azure CLI (System MI will handle this in Container Apps)
          az acr login --name $ACR_NAME
          
          # Build and push the container image
          docker build -f ${{ env.PROJECT_PATH }}/Dockerfile -t $IMAGE_URI ${{ env.PROJECT_PATH }}
          docker push $IMAGE_URI
          
          # Set outputs for deploy job
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          
          echo "✅ Container image built and pushed successfully!"

  # ==============================================================================
  # DEPLOY JOB - Deploy using AZD with System Managed Identity
  # ==============================================================================
  deploy:
    name: 🚀 Deploy Users API
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'dev' || 'dev') }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: 📦 Install Azure Developer CLI
        uses: Azure/setup-azd@v1.0.0

      - name: 🚀 Deploy Users API with AZD
        id: deploy
        run: |
          # Set environment variables for deployment
          ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'dev' || 'dev') }}"
          RESOURCE_GROUP="rg-tc-cloudgames-${ENVIRONMENT}"
          
          # Navigate to Users API directory
          cd ${{ env.PROJECT_PATH }}
          
          # Initialize AZD environment if not exists
          if [ ! -f "azure.yaml" ]; then
            echo "📝 Creating AZD configuration for Users API..."
            azd init --template empty --environment $ENVIRONMENT --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}
          fi
          
          # Set AZD environment variables for Container Apps deployment
          azd env set AZURE_SUBSCRIPTION_ID ${{ env.AZURE_SUBSCRIPTION_ID }}
          azd env set AZURE_RESOURCE_GROUP $RESOURCE_GROUP
          azd env set AZURE_CONTAINER_REGISTRY_NAME $(az acr list --resource-group $RESOURCE_GROUP --query "[0].name" -o tsv)
          azd env set AZURE_CONTAINER_APP_ENVIRONMENT_NAME $(az containerapp env list --resource-group $RESOURCE_GROUP --query "[0].name" -o tsv)
          azd env set AZURE_KEY_VAULT_NAME $(az keyvault list --resource-group $RESOURCE_GROUP --query "[0].name" -o tsv)
          
          # Set the container image built in previous job
          azd env set DOCKER_IMAGE_URI ${{ needs.build.outputs.image-uri }}
          
          # Deploy the Users API Container App
          echo "🚀 Deploying Users API Container App..."
          azd deploy --no-prompt
          
          # Get deployment outputs
          CONTAINER_APP_NAME=$(az containerapp list --resource-group $RESOURCE_GROUP --query "[?contains(name, '${{ env.SERVICE_NAME }}')].name" -o tsv)
          CONTAINER_APP_URL=$(az containerapp show --name $CONTAINER_APP_NAME --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv)
          
          echo "✅ Users API deployed successfully!"
          echo "🌐 Container App Name: $CONTAINER_APP_NAME"
          echo "🔗 Container App URL: https://$CONTAINER_APP_URL"
          
          # Test the deployment
          echo "🧪 Testing deployment health..."
          if curl -f "https://$CONTAINER_APP_URL/health" > /dev/null 2>&1; then
            echo "✅ Health check passed!"
          else
            echo "⚠️ Health check failed - but deployment completed"
          fi

  # ==============================================================================
  # SUMMARY JOB - Deployment summary and next steps
  # ==============================================================================
  summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
      - name: 📊 Generate Deployment Summary
        run: |
          echo "# 🚀 Users API Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'dev' || 'dev') }}"
          
          echo "## 📋 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`$ENVIRONMENT\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: \`${{ env.SERVICE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: \`${{ needs.build.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image URI**: \`${{ needs.build.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "## ✅ Deployment Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎉 Key Benefits of This Modern Pipeline:" >> $GITHUB_STEP_SUMMARY
            echo "- **System Managed Identity**: No manual secret management required" >> $GITHUB_STEP_SUMMARY
            echo "- **RBAC Integration**: Secure access to Key Vault using Azure roles" >> $GITHUB_STEP_SUMMARY
            echo "- **Automated Secret Binding**: Container App automatically accesses Key Vault secrets" >> $GITHUB_STEP_SUMMARY
            echo "- **AZD Integration**: Streamlined Container Apps deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **Infrastructure Separation**: Foundation infrastructure managed separately" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Deployment Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔍 Troubleshooting:" >> $GITHUB_STEP_SUMMARY
            echo "- Check build logs for container image issues" >> $GITHUB_STEP_SUMMARY
            echo "- Verify AZD configuration and azure.yaml" >> $GITHUB_STEP_SUMMARY
            echo "- Ensure foundation infrastructure is deployed" >> $GITHUB_STEP_SUMMARY
            echo "- Validate System Managed Identity permissions" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Azure Portal - Resource Group](https://portal.azure.com/#@${{ env.AZURE_TENANT_ID }}/resource/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-tc-cloudgames-$ENVIRONMENT)" >> $GITHUB_STEP_SUMMARY
          echo "- [Azure Portal - Container Apps](https://portal.azure.com/#@${{ env.AZURE_TENANT_ID }}/resource/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-tc-cloudgames-$ENVIRONMENT/providers/Microsoft.App/containerApps)" >> $GITHUB_STEP_SUMMARY
          echo "- [Azure Portal - Key Vault](https://portal.azure.com/#@${{ env.AZURE_TENANT_ID }}/resource/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-tc-cloudgames-$ENVIRONMENT/providers/Microsoft.KeyVault/vaults)" >> $GITHUB_STEP_SUMMARY
