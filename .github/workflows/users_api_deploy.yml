name: üöÄ Users API CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    types: [closed]
    paths:
      - 'services/users/**'
      - '.github/workflows/**'
      - 'azd/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        default: 'dev-rodrigo'
        type: choice
        options:
          - dev-rodrigo

env:
  SERVICE_NAME: users-api
  SOLUTION_PATH: services/users/TC.CloudGames.Users.sln

jobs:
  check-trigger:
    name: üîç Validate Deployment Trigger
    if: (github.event.pull_request.merged == true) || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: ‚úÖ Check deployment trigger
        id: check
        run: |
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "üöÄ Deployment triggered by: ${{ github.event_name }}"

  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should-deploy == 'true'
    
    permissions:
      contents: read
      actions: read
      checks: write
      pull-requests: write

    steps:
      - name: üì• Checkout Users API repository
        uses: actions/checkout@v4
        with:
          path: tc-cloudgames-solution/services/users

      - name: üì• Checkout shared common repository
        uses: actions/checkout@v4
        with:
          repository: rdpresser/tc-cloudgames-common
          path: tc-cloudgames-solution/shared/common
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öôÔ∏è Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: üß™ Restore, Build & Test
        run: |
          dotnet restore ${{ env.SOLUTION_PATH }}
          dotnet test ${{ env.SOLUTION_PATH }} \
            --configuration Release \
            --logger trx \
            --collect:"XPlat Code Coverage" \
            --results-directory tc-cloudgames-solution/services/users/test-results \
            --verbosity normal

      - name: üìä Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: üß™ Unit Tests Results
          path: tc-cloudgames-solution/services/users/test-results/*.trx
          reporter: dotnet-trx
          fail-on-error: true
          working-directory: tc-cloudgames-solution/services/users

      - name: üìä Generate & Upload Coverage
        if: always()
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            "-reports:tc-cloudgames-solution/services/users/test-results/**/coverage.cobertura.xml" \
            "-targetdir:tc-cloudgames-solution/services/users/coverage-report" \
            "-reporttypes:Html;Badges;TextSummary"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ github.sha }}
          path: |
            tc-cloudgames-solution/services/users/coverage-report/
            tc-cloudgames-solution/services/users/test-results/**/coverage.cobertura.xml
          retention-days: 7

  get-foundation-outputs:
    name: üîó Get Foundation Infrastructure
    runs-on: ubuntu-latest
    needs: [check-trigger, unit-tests]
    if: needs.check-trigger.outputs.should-deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'dev-rodrigo' }}

    outputs:
      resource-group: ${{ steps.outputs.outputs.resource-group }}
      acr-name: ${{ steps.outputs.outputs.acr-name }}
      acr-login-server: ${{ steps.outputs.outputs.acr-login-server }}
      key-vault-name: ${{ steps.outputs.outputs.key-vault-name }}
      container-app-env-name: ${{ steps.outputs.outputs.container-app-env-name }}
      environment: ${{ steps.outputs.outputs.environment }}
      azure-environment: ${{ steps.outputs.outputs.azure-environment }}
      azure-subscription-id: ${{ steps.outputs.outputs.azure-subscription-id }}

    steps:
      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üîó Get Foundation Infrastructure Outputs
        id: outputs
        run: |
          AZURE_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
          GITHUB_ENVIRONMENT="${{ github.event.inputs.environment || 'dev-rodrigo' }}"
          AZURE_ENV_PREFIX=$(echo $GITHUB_ENVIRONMENT | cut -d'-' -f1)
          RESOURCE_GROUP="tc-cloudgames-solution-${AZURE_ENV_PREFIX}-rg"

          ACR_NAME=$(az acr list --resource-group $RESOURCE_GROUP --query "[?starts_with(name, 'tccloudgames${AZURE_ENV_PREFIX}')].name" -o tsv | head -1)
          KEY_VAULT_NAME=$(az keyvault list --resource-group $RESOURCE_GROUP --query "[?starts_with(name, 'tccloudgames${AZURE_ENV_PREFIX}')].name" -o tsv | head -1)
          CONTAINER_APP_ENV_NAME=$(az containerapp env list --resource-group $RESOURCE_GROUP --query "[?starts_with(name, 'tc-cloudgames-${AZURE_ENV_PREFIX}-') && ends_with(name, '-env')].name" -o tsv | head -1)
          ACR_LOGIN_SERVER="${ACR_NAME}.azurecr.io"

          echo "resource-group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "acr-name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "acr-login-server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "key-vault-name=$KEY_VAULT_NAME" >> $GITHUB_OUTPUT
          echo "container-app-env-name=$CONTAINER_APP_ENV_NAME" >> $GITHUB_OUTPUT
          echo "environment=$GITHUB_ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "azure-environment=$AZURE_ENV_PREFIX" >> $GITHUB_OUTPUT
          echo "azure-subscription-id=$AZURE_SUBSCRIPTION_ID" >> $GITHUB_OUTPUT

  deploy:
    name: üöÄ Deploy Users API Container App
    runs-on: ubuntu-latest
    needs: [check-trigger, unit-tests, get-foundation-outputs]
    if: needs.check-trigger.outputs.should-deploy == 'true'
    environment: ${{ needs.get-foundation-outputs.outputs.environment }}
    
    outputs:
      container-app-name: ${{ steps.deploy.outputs.container-app-name }}
      container-app-url: ${{ steps.deploy.outputs.container-app-url }}
      image-tag: ${{ steps.build-vars.outputs.image-tag }}
      image-uri: ${{ steps.build-vars.outputs.image-uri }}

    steps:
      - name: üì• Checkout Users API repository
        uses: actions/checkout@v4
        with:
          path: tc-cloudgames-solution/services/users

      - name: üì• Checkout shared common repository
        uses: actions/checkout@v4
        with:
          repository: rdpresser/tc-cloudgames-common
          path: tc-cloudgames-solution/shared/common
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öôÔ∏è Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üèóÔ∏è Prepare Build Variables
        id: build-vars
        run: |
          IMAGE_TAG="$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-8)"
          SERVICE_NAME_WITH_ENV="${{ env.SERVICE_NAME }}-${{ needs.get-foundation-outputs.outputs.azure-environment }}"
          IMAGE_URI="${{ needs.get-foundation-outputs.outputs.acr-login-server }}/${SERVICE_NAME_WITH_ENV}:${IMAGE_TAG}"
          CONTAINER_APP_NAME="${SERVICE_NAME_WITH_ENV}"
          
          echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: üê≥ Login to ACR
        run: az acr login --name ${{ needs.get-foundation-outputs.outputs.acr-name }}

      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./tc-cloudgames-solution
          file: ./tc-cloudgames-solution/services/users/src/Adapters/Inbound/TC.CloudGames.Users.Api/Dockerfile
          push: true
          tags: ${{ steps.build-vars.outputs.image-uri }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: üöÄ Deploy Container App
        id: deploy
        run: |
          CONTAINER_APP_NAME="${{ steps.build-vars.outputs.container-app-name }}"
          IMAGE_URI="${{ steps.build-vars.outputs.image-uri }}"
          VAULT_URL="https://${{ needs.get-foundation-outputs.outputs.key-vault-name }}.vault.azure.net"

          # 1. Cria ou atualiza o app com MI habilitada
          az containerapp up \
            --name "$CONTAINER_APP_NAME" \
            --resource-group ${{ needs.get-foundation-outputs.outputs.resource-group }} \
            --environment ${{ needs.get-foundation-outputs.outputs.container-app-env-name }} \
            --image "$IMAGE_URI" \
            --target-port 8080 \
            --ingress external \
            --registry-server ${{ needs.get-foundation-outputs.outputs.acr-login-server }} \
            --system-assigned

          az containerapp identity assign \
            --name "$CONTAINER_APP_NAME" \
            --resource-group ${{ needs.get-foundation-outputs.outputs.resource-group }}

          PRINCIPAL_ID=$(az containerapp identity show \
            --name "$CONTAINER_APP_NAME" \
            --resource-group ${{ needs.get-foundation-outputs.outputs.resource-group }} \
            --query "principalId" -o tsv)

          # 2. Permiss√µes Key Vault + ACR
          az role assignment create --assignee "$PRINCIPAL_ID" --role "Key Vault Secrets User" \
            --scope "/subscriptions/${{ needs.get-foundation-outputs.outputs.azure-subscription-id }}/resourceGroups/${{ needs.get-foundation-outputs.outputs.resource-group }}/providers/Microsoft.KeyVault/vaults/${{ needs.get-foundation-outputs.outputs.key-vault-name }}" \
            --only-show-errors || echo "‚úÖ KV role exists"

          az role assignment create --assignee "$PRINCIPAL_ID" --role "AcrPull" \
            --scope "/subscriptions/${{ needs.get-foundation-outputs.outputs.azure-subscription-id }}/resourceGroups/${{ needs.get-foundation-outputs.outputs.resource-group }}/providers/Microsoft.ContainerRegistry/registries/${{ needs.get-foundation-outputs.outputs.acr-name }}" \
            --only-show-errors || echo "‚úÖ ACR role exists"

          # 3. Configura secrets
          az containerapp secret set \
            --name "$CONTAINER_APP_NAME" \
            --resource-group ${{ needs.get-foundation-outputs.outputs.resource-group }} \
            --secrets \
              db-host=keyvaultref:${VAULT_URL}/secrets/db-host,identityref:system \
              db-port=keyvaultref:${VAULT_URL}/secrets/db-port,identityref:system \
              db-name-users=keyvaultref:${VAULT_URL}/secrets/db-name-users,identityref:system \
              db-admin-login=keyvaultref:${VAULT_URL}/secrets/db-admin-login,identityref:system \
              db-password=keyvaultref:${VAULT_URL}/secrets/db-password,identityref:system \
              cache-host=keyvaultref:${VAULT_URL}/secrets/cache-host,identityref:system \
              cache-port=keyvaultref:${VAULT_URL}/secrets/cache-port,identityref:system \
              cache-password=keyvaultref:${VAULT_URL}/secrets/cache-password,identityref:system \
              servicebus-namespace=keyvaultref:${VAULT_URL}/secrets/servicebus-namespace,identityref:system

          # 4. Vari√°veis de ambiente
          az containerapp update \
            --name "$CONTAINER_APP_NAME" \
            --resource-group ${{ needs.get-foundation-outputs.outputs.resource-group }} \
            --set-env-vars \
              ASPNETCORE_ENVIRONMENT=Development \
              ASPNETCORE_URLS=http://+:8080 \
              DB_HOST=secretref:db-host \
              DB_PORT=secretref:db-port \
              DB_NAME=secretref:db-name-users \
              DB_USER=secretref:db-admin-login \
              DB_PASSWORD=secretref:db-password \
              CACHE_HOST=secretref:cache-host \
              CACHE_PORT=secretref:cache-port \
              CACHE_PASSWORD=secretref:cache-password \
              SERVICEBUS_NAMESPACE=secretref:servicebus-namespace

          # 5. URL
          CONTAINER_APP_URL=$(az containerapp show \
            --name "$CONTAINER_APP_NAME" \
            --resource-group ${{ needs.get-foundation-outputs.outputs.resource-group }} \
            --query "properties.configuration.ingress.fqdn" -o tsv)

          echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
          echo "container-app-url=https://$CONTAINER_APP_URL" >> $GITHUB_OUTPUT

      - name: üß™ Health Check
        run: |
          HEALTH_URL="${{ steps.deploy.outputs.container-app-url }}/health"
          sleep 30
          for i in {1..3}; do
            if curl -f "$HEALTH_URL" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!" >> $GITHUB_STEP_SUMMARY
              exit 0
            else
              echo "‚è≥ Attempt $i failed, retrying..."
              sleep 20
            fi
          done
          echo "‚ùå Health check failed" >> $GITHUB_STEP_SUMMARY
          exit 1

  summary:
    name: üìä Deployment Summary
    runs-on: ubuntu-latest
    needs: [check-trigger, unit-tests, get-foundation-outputs, deploy]
    if: always() && needs.check-trigger.outputs.should-deploy == 'true'

    steps:
      - name: üìä Generate Deployment Summary
        run: |
          echo "# üöÄ Users API Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ needs.get-foundation-outputs.outputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: \`${{ env.SERVICE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ needs.deploy.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Container App**: \`${{ needs.deploy.outputs.container-app-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: [${{ needs.deploy.outputs.container-app-url }}](${{ needs.deploy.outputs.container-app-url }})" >> $GITHUB_STEP_SUMMARY
