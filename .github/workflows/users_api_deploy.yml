name: üöÄ Users API CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    types: [closed]
    paths:
      - 'services/users/**'
      - '.github/workflows/**'
      - 'azd/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        default: 'dev-rodrigo'
        type: choice
        options:
          - dev-rodrigo

env:
  SERVICE_NAME: users-api
  SOLUTION_PATH: services/users/TC.CloudGames.Users.sln

jobs:
  check-trigger:
    if: (github.event.pull_request.merged == true) || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: ‚úÖ Check deployment trigger
        id: check
        run: |
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "üöÄ Deployment triggered by: ${{ github.event_name }}"

  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should-deploy == 'true'
    
    # ‚úÖ Permiss√µes necess√°rias para o dorny/test-reporter
    permissions:
      contents: read
      actions: read
      checks: write
      pull-requests: write

    steps:
      - name: üìÇ Prepare workspace
        run: mkdir -p tc-cloudgames-solution/services/users

      - name: üì• Checkout Users API repository
        uses: actions/checkout@v4
        with:
          path: tc-cloudgames-solution/services/users

      - name: üì• Checkout shared common repository
        uses: actions/checkout@v4
        with:
          repository: rdpresser/tc-cloudgames-common
          path: tc-cloudgames-solution/shared/common
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öôÔ∏è Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: üì¶ Restore dependencies
        run: dotnet restore tc-cloudgames-solution/services/users/TC.CloudGames.Users.sln

      - name: üèóÔ∏è Build solution
        run: dotnet build tc-cloudgames-solution/services/users/TC.CloudGames.Users.sln --no-restore --configuration Release

      - name: üß™ Run unit tests
        run: |
          dotnet test tc-cloudgames-solution/services/users/TC.CloudGames.Users.sln \
            --no-build \
            --configuration Release \
            --logger trx \
            --collect:"XPlat Code Coverage" \
            --results-directory tc-cloudgames-solution/services/users/test-results \
            --verbosity normal

      - name: üìä Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: üß™ Unit Tests Results
          path: ./test-results/*.trx
          reporter: dotnet-trx
          fail-on-error: true
          working-directory: tc-cloudgames-solution/services/users

      - name: üìà Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports-${{ github.sha }}
          path: tc-cloudgames-solution/services/users/test-results/**/coverage.cobertura.xml
          retention-days: 5

  get-foundation-outputs:
    name: üîó Get Foundation Infrastructure
    runs-on: ubuntu-latest
    needs: [check-trigger, unit-tests]
    if: needs.check-trigger.outputs.should-deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'dev-rodrigo' }}

    outputs:
      resource-group: ${{ steps.outputs.outputs.resource-group }}
      acr-name: ${{ steps.outputs.outputs.acr-name }}
      acr-login-server: ${{ steps.outputs.outputs.acr-login-server }}
      key-vault-name: ${{ steps.outputs.outputs.key-vault-name }}
      container-app-env-name: ${{ steps.outputs.outputs.container-app-env-name }}
      environment: ${{ steps.outputs.outputs.environment }}
      azure-environment: ${{ steps.outputs.outputs.azure-environment }}
      azure-subscription-id: ${{ steps.outputs.outputs.azure-subscription-id }}

    steps:
      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üîó Get Foundation Infrastructure Outputs
        id: outputs
        run: |
          AZURE_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
          GITHUB_ENVIRONMENT="${{ github.event.inputs.environment || 'dev-rodrigo' }}"
          AZURE_ENV_PREFIX=$(echo $GITHUB_ENVIRONMENT | cut -d'-' -f1)
          RESOURCE_GROUP="tc-cloudgames-solution-${AZURE_ENV_PREFIX}-rg"

          ACR_NAME=$(az acr list --resource-group $RESOURCE_GROUP --query "[?starts_with(name, 'tccloudgames${AZURE_ENV_PREFIX}')].name" -o tsv | head -1)
          KEY_VAULT_NAME=$(az keyvault list --resource-group $RESOURCE_GROUP --query "[?starts_with(name, 'tccloudgames${AZURE_ENV_PREFIX}')].name" -o tsv | head -1)
          CONTAINER_APP_ENV_NAME=$(az containerapp env list --resource-group $RESOURCE_GROUP --query "[?starts_with(name, 'tc-cloudgames-${AZURE_ENV_PREFIX}-') && ends_with(name, '-env')].name" -o tsv | head -1)
          ACR_LOGIN_SERVER="${ACR_NAME}.azurecr.io"

          if [ -z "$ACR_NAME" ] || [ -z "$KEY_VAULT_NAME" ] || [ -z "$CONTAINER_APP_ENV_NAME" ]; then
            echo "‚ùå Missing resources in $RESOURCE_GROUP. Found: ACR=$ACR_NAME, KV=$KEY_VAULT_NAME, ENV=$CONTAINER_APP_ENV_NAME"
            exit 1
          fi

          echo "resource-group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "acr-name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "acr-login-server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "key-vault-name=$KEY_VAULT_NAME" >> $GITHUB_OUTPUT
          echo "container-app-env-name=$CONTAINER_APP_ENV_NAME" >> $GITHUB_OUTPUT
          echo "environment=$GITHUB_ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "azure-environment=$AZURE_ENV_PREFIX" >> $GITHUB_OUTPUT
          echo "azure-subscription-id=$AZURE_SUBSCRIPTION_ID" >> $GITHUB_OUTPUT

  deploy:
    name: üöÄ Deploy Users API with AZD
    runs-on: ubuntu-latest
    needs: [check-trigger, unit-tests, get-foundation-outputs]
    if: needs.check-trigger.outputs.should-deploy == 'true'
    environment: ${{ needs.get-foundation-outputs.outputs.environment }}
    
    outputs:
      container-app-name: ${{ steps.deploy.outputs.container-app-name }}
      container-app-url: ${{ steps.deploy.outputs.container-app-url }}
      image-tag: ${{ steps.deploy.outputs.image-tag }}
      image-uri: ${{ steps.deploy.outputs.image-uri }}

    steps:
      - name: üìÇ Prepare workspace
        run: mkdir -p tc-cloudgames-solution/services/users

      - name: üì• Checkout Users API repository
        uses: actions/checkout@v4
        with:
          path: tc-cloudgames-solution/services/users

      - name: üì• Checkout shared common repository
        uses: actions/checkout@v4
        with:
          repository: rdpresser/tc-cloudgames-common
          path: tc-cloudgames-solution/shared/common
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öôÔ∏è Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üì¶ Install Azure Developer CLI
        uses: Azure/setup-azd@v1.0.0

      - name: üöÄ Deploy Users API with AZD
        id: deploy
        working-directory: ./tc-cloudgames-solution/services/users/azd
        run: |
          IMAGE_TAG="$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-8)"
          IMAGE_URI="${{ needs.get-foundation-outputs.outputs.acr-login-server }}/${{ env.SERVICE_NAME }}:${IMAGE_TAG}"
          ENVIRONMENT="${{ needs.get-foundation-outputs.outputs.environment }}"

          if [ ! -f ".azure/$ENVIRONMENT/.env" ]; then
            azd env new $ENVIRONMENT
          fi

          azd env set AZURE_SUBSCRIPTION_ID ${{ needs.get-foundation-outputs.outputs.azure-subscription-id }}
          azd env set AZURE_RESOURCE_GROUP ${{ needs.get-foundation-outputs.outputs.resource-group }}
          azd env set AZURE_CONTAINER_REGISTRY_NAME ${{ needs.get-foundation-outputs.outputs.acr-name }}
          azd env set AZURE_CONTAINER_APP_ENVIRONMENT_NAME ${{ needs.get-foundation-outputs.outputs.container-app-env-name }}
          azd env set AZURE_KEY_VAULT_NAME ${{ needs.get-foundation-outputs.outputs.key-vault-name }}
          azd env set AZURE_LOCATION $(az group show --name ${{ needs.get-foundation-outputs.outputs.resource-group }} --query location -o tsv)
          azd env set AZURE_ENVIRONMENT ${{ needs.get-foundation-outputs.outputs.azure-environment }}
          azd env set CONTAINER_IMAGE_TAG $IMAGE_TAG
          azd env set CONTAINER_IMAGE_URI $IMAGE_URI

          azd up --no-prompt

          CONTAINER_APP_NAME=$(az containerapp list \
            --resource-group ${{ needs.get-foundation-outputs.outputs.resource-group }} \
            --query "[?contains(name, '${{ env.SERVICE_NAME }}')].name" -o tsv)

          CONTAINER_APP_URL=$(az containerapp show \
            --name $CONTAINER_APP_NAME \
            --resource-group ${{ needs.get-foundation-outputs.outputs.resource-group }} \
            --query "properties.configuration.ingress.fqdn" -o tsv)

          echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
          echo "container-app-url=https://$CONTAINER_APP_URL" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: üß™ Health Check
        run: |
          HEALTH_URL="${{ steps.deploy.outputs.container-app-url }}/health"
          sleep 30
          for i in {1..3}; do
            if curl -f "$HEALTH_URL" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚è≥ Attempt $i failed, retrying..."
              sleep 20
            fi
          done

  summary:
    name: üìä Deployment Summary
    runs-on: ubuntu-latest
    needs: [check-trigger, unit-tests, get-foundation-outputs, deploy]
    if: always() && needs.check-trigger.outputs.should-deploy == 'true'

    steps:
      - name: üìä Generate Deployment Summary
        run: |
          echo "# üöÄ Users API Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ needs.get-foundation-outputs.outputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: \`${{ env.SERVICE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ needs.deploy.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Container App**: \`${{ needs.deploy.outputs.container-app-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: [${{ needs.deploy.outputs.container-app-url }}](${{ needs.deploy.outputs.container-app-url }})" >> $GITHUB_STEP_SUMMARY
