name: 🚀 Deploy Container App

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      workspace-path:
        required: true
        type: string
      dockerfile-path:
        required: true
        type: string
      environment:
        required: true
        type: string
      acr-name:
        required: true
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      # 1️⃣ Prepare workspace
      - name: 📂 Prepare workspace
        run: mkdir -p ${{ inputs.workspace-path }}

      # 2️⃣ Checkout repositories
      - name: 📥 Checkout API repository
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.workspace-path }}

      - name: 📥 Checkout shared common repository
        uses: actions/checkout@v4
        with:
          repository: rdpresser/tc-cloudgames-common
          path: tc-cloudgames-solution/shared/common
          token: ${{ secrets.GITHUB_TOKEN }}

      # 3️⃣ Setup .NET
      - name: ⚙️ Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 4️⃣ Azure login
      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 5️⃣ Build variables and immutable image tag
      - name: 🏗️ Prepare Build Variables
        id: build-vars
        run: |
          IMAGE_TAG="$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-8)"
          IMAGE_URI="${{ inputs.acr-name }}.azurecr.io/${{ inputs.service-name }}:${IMAGE_TAG}"
          IMAGE_URI_LATEST="${{ inputs.acr-name }}.azurecr.io/${{ inputs.service-name }}:latest"

          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image-uri-latest=$IMAGE_URI_LATEST" >> $GITHUB_OUTPUT

      # 6️⃣ Login to ACR
      - name: 🐳 Login to Azure Container Registry
        run: az acr login --name ${{ inputs.acr-name }}

      - name: ⚙️ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 7️⃣ Build and push Docker image
      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        id: build-push
        with:
          context: ./tc-cloudgames-solution
          file: ./tc-cloudgames-solution/${{ inputs.dockerfile-path }}
          push: true
          tags: |
            ${{ steps.build-vars.outputs.image-uri }}
            ${{ steps.build-vars.outputs.image-uri-latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # 8️⃣ Wait for image tag in ACR
      - name: 🔎 Wait for image tag in ACR
        run: |
          ACR_NAME="${{ inputs.acr-name }}"
          REPO="${{ inputs.service-name }}"
          IMAGE_TAG="${{ steps.build-vars.outputs.image-tag }}"
          found=0
          for i in $(seq 1 10); do
            if az acr repository show-tags --name "$ACR_NAME" --repository "$REPO" -o tsv | grep -q "^${IMAGE_TAG}$"; then
              found=1
              break
            fi
            sleep 6
          done
          if [ "$found" -ne 1 ]; then
            echo "Tag $IMAGE_TAG not found in ACR"; exit 1
          fi

      # 9️⃣ Find container app
      - name: 🔎 Get Container App Info
        id: container-app
        run: |
          CONTAINER_APP_INFO=$(az containerapp list \
            --query "[?contains(name, '${{ inputs.service-name }}')].[name, resourceGroup]" -o tsv | head -1)
          if [ -z "$CONTAINER_APP_INFO" ]; then
            echo "Container App not found"; exit 1
          fi
          CONTAINER_APP_NAME=$(echo "$CONTAINER_APP_INFO" | awk '{print $1}')
          RESOURCE_GROUP=$(echo "$CONTAINER_APP_INFO" | awk '{print $2}')

          echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
          echo "resource-group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT

      # 🔐 10️⃣ Set secrets in Container App (from KeyVault)
      - name: 🔑 Set secrets
        run: |
          CONTAINER_APP=${{ steps.container-app.outputs.container-app-name }}
          RG=${{ steps.container-app.outputs.resource-group }}

          # Map of env vars to KeyVault secret names
          declare -A SECRETS=(
            ["db-host"]="DB_HOST"
            ["db-port"]="DB_PORT"
            ["db-name-users"]="DB_NAME"
            ["db-admin-login"]="DB_USER"
            ["db-password"]="DB_PASSWORD"
            ["db-name-maintenance"]="DB_MAINTENANCE_NAME"
            ["db-schema"]="DB_SCHEMA"
            ["db-connection-timeout"]="DB_CONNECTION_TIMEOUT"
            ["cache-host"]="CACHE_HOST"
            ["cache-port"]="CACHE_PORT"
            ["cache-password"]="CACHE_PASSWORD"
            ["cache-secure"]="CACHE_SECURE"
            ["servicebus-connection-string"]="AZURE_SERVICEBUS_CONNECTIONSTRING"
            ["servicebus-auto-provision"]="AZURE_SERVICEBUS_AUTO_PROVISION"
            ["servicebus-max-delivery-count"]="AZURE_SERVICEBUS_MAX_DELIVERY_COUNT"
            ["servicebus-enable-dead-lettering"]="AZURE_SERVICEBUS_ENABLE_DEAD_LETTERING"
            ["servicebus-auto-purge-on-startup"]="AZURE_SERVICEBUS_AUTO_PURGE_ON_STARTUP"
            ["servicebus-use-control-queues"]="AZURE_SERVICEBUS_USE_CONTROL_QUEUES"
          )

          for SECRET_NAME in "${!SECRETS[@]}"; do
            az containerapp secret set \
              --name "$CONTAINER_APP" \
              --resource-group "$RG" \
              --secrets "$SECRET_NAME=$(az keyvault secret show --vault-name ${{ inputs.environment }} --name $SECRET_NAME --query value -o tsv)"
          done

      # 🌱 11️⃣ Set env vars referencing secrets
      - name: 🌱 Set environment variables via secretRef
        run: |
          CONTAINER_APP=${{ steps.container-app.outputs.container-app-name }}
          RG=${{ steps.container-app.outputs.resource-group }}

          declare -A SECRETS=(
            ["db-host"]="DB_HOST"
            ["db-port"]="DB_PORT"
            ["db-name-users"]="DB_NAME"
            ["db-admin-login"]="DB_USER"
            ["db-password"]="DB_PASSWORD"
            ["db-name-maintenance"]="DB_MAINTENANCE_NAME"
            ["db-schema"]="DB_SCHEMA"
            ["db-connection-timeout"]="DB_CONNECTION_TIMEOUT"
            ["cache-host"]="CACHE_HOST"
            ["cache-port"]="CACHE_PORT"
            ["cache-password"]="CACHE_PASSWORD"
            ["cache-secure"]="CACHE_SECURE"
            ["servicebus-connection-string"]="AZURE_SERVICEBUS_CONNECTIONSTRING"
            ["servicebus-auto-provision"]="AZURE_SERVICEBUS_AUTO_PROVISION"
            ["servicebus-max-delivery-count"]="AZURE_SERVICEBUS_MAX_DELIVERY_COUNT"
            ["servicebus-enable-dead-lettering"]="AZURE_SERVICEBUS_ENABLE_DEAD_LETTERING"
            ["servicebus-auto-purge-on-startup"]="AZURE_SERVICEBUS_AUTO_PURGE_ON_STARTUP"
            ["servicebus-use-control-queues"]="AZURE_SERVICEBUS_USE_CONTROL_QUEUES"
          )

          for SECRET_NAME in "${!SECRETS[@]}"; do
            ENV_VAR_NAME=${SECRETS[$SECRET_NAME]}
            az containerapp env var set \
              --name "$CONTAINER_APP" \
              --resource-group "$RG" \
              --secret-ref "$ENV_VAR_NAME=$SECRET_NAME"
          done

      # 🚀 12️⃣ Deploy image immutable tag
      - name: 🚀 Update Container App Image
        run: |
          CONTAINER_APP=${{ steps.container-app.outputs.container-app-name }}
          RG=${{ steps.container-app.outputs.resource-group }}
          IMAGE_URI="${{ steps.build-vars.outputs.image-uri }}"

          az containerapp update \
            --name "$CONTAINER_APP" \
            --resource-group "$RG" \
            --image "$IMAGE_URI"

          # Get FQDN for health check
          APP_URL=$(az containerapp show \
            --name "$CONTAINER_APP" \
            --resource-group "$RG" \
            --query "properties.configuration.ingress.fqdn" -o tsv)

          echo "container-app-url=https://$APP_URL" >> $GITHUB_OUTPUT

      # 🧪 13️⃣ Health check
      - name: 🧪 Health Check
        run: |
          HEALTH_URL="${{ steps.deploy.outputs.container-app-url }}/health"
          sleep 20
          for i in {1..3}; do
            if curl -fsS "$HEALTH_URL" > /dev/null 2>&1; then
              echo "✅ Health check passed!"
              exit 0
            fi
            sleep 15
          done
          echo "❌ Health check failed after 3 attempts"
          exit 1
