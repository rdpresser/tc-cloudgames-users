name: üöÄ Deploy Container App

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      workspace-path:
        required: true
        type: string
      dockerfile-path:
        required: true
        type: string
      environment:
        required: true
        type: string
      acr-name:
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: üìÇ Prepare workspace
        run: mkdir -p ${{ inputs.workspace-path }}

      - name: üì• Checkout API repository
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.workspace-path }}

      - name: üì• Checkout shared common repository
        uses: actions/checkout@v4
        with:
          repository: rdpresser/tc-cloudgames-common
          path: tc-cloudgames-solution/shared/common
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öôÔ∏è Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üèóÔ∏è Prepare Build Variables
        id: build-vars
        run: |
          IMAGE_TAG="$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-8)"
          IMAGE_URI="${{ inputs.acr-name }}.azurecr.io/${{ inputs.service-name }}:${IMAGE_TAG}"
          IMAGE_URI_LATEST="${{ inputs.acr-name }}.azurecr.io/${{ inputs.service-name }}:latest"
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image-uri-latest=$IMAGE_URI_LATEST" >> $GITHUB_OUTPUT

      - name: üê≥ Login to Azure Container Registry
        run: az acr login --name ${{ inputs.acr-name }}

      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build and Push Docker Image
        uses: docker/build-push-action@v5
        id: build-push
        with:
          context: ./tc-cloudgames-solution
          file: ./tc-cloudgames-solution/${{ inputs.dockerfile-path }}
          push: true
          tags: |
            ${{ steps.build-vars.outputs.image-uri }}
            ${{ steps.build-vars.outputs.image-uri-latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: üöÄ Deploy to Azure Container App
        id: deploy
        run: |
          CONTAINER_APP_NAME=$(az containerapp list \
            --query "[?contains(name, '${{ inputs.service-name }}')].name" -o tsv | head -1)

          echo "üöÄ Updating $CONTAINER_APP_NAME with image ${{ steps.build-vars.outputs.image-uri-latest }}"
          az containerapp update \
            --name "$CONTAINER_APP_NAME" \
            --image "${{ steps.build-vars.outputs.image-uri-latest }}" \
            --output none

          APP_URL=$(az containerapp show \
            --name "$CONTAINER_APP_NAME" \
            --query "properties.configuration.ingress.fqdn" -o tsv)

          echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
          echo "container-app-url=https://$APP_URL" >> $GITHUB_OUTPUT

      - name: üß™ Health Check
        run: |
          HEALTH_URL="${{ steps.deploy.outputs.container-app-url }}/health"
          sleep 30
          for i in {1..3}; do
            if curl -f "$HEALTH_URL" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              exit 0
            else
              echo "‚è≥ Attempt $i failed, retrying..."
              sleep 20
            fi
          done
          echo "‚ùå Health check failed after 3 attempts"
          exit 1
