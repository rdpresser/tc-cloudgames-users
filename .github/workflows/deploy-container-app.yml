name: 🚀 Deploy Container App

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      workspace-path:
        required: true
        type: string
      dockerfile-path:
        required: true
        type: string
      environment:
        required: true
        type: string
      acr-name:
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      container-app-name: ${{ steps.container-app.outputs.container-app-name }}
      container-app-url: ${{ steps.get-url.outputs.container-app-url }}
      image-tag: ${{ steps.build-vars.outputs.image-tag }}
      image-uri: ${{ steps.build-vars.outputs.image-uri }}
    steps:

      # 1️⃣ Prepare workspace
      - name: 📂 Prepare workspace
        run: mkdir -p ${{ inputs.workspace-path }}

      # 2️⃣ Checkout repositories
      - name: 📥 Checkout API repository
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.workspace-path }}

      - name: 📥 Checkout shared repository
        uses: actions/checkout@v4
        with:
          repository: rdpresser/tc-cloudgames-common
          path: tc-cloudgames-solution/shared/common
          token: ${{ secrets.GITHUB_TOKEN }}

      # 3️⃣ Setup .NET
      - name: ⚙️ Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 4️⃣ Azure Login
      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 5️⃣ Prepare Build Variables
      - name: 🏗️ Prepare Build Variables
        id: build-vars
        run: |
          IMAGE_TAG="$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-8)"
          IMAGE_URI="${{ inputs.acr-name }}.azurecr.io/${{ inputs.service-name }}:${IMAGE_TAG}"
          IMAGE_URI_LATEST="${{ inputs.acr-name }}.azurecr.io/${{ inputs.service-name }}:latest"

          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image-uri-latest=$IMAGE_URI_LATEST" >> $GITHUB_OUTPUT
        shell: bash

      # 6️⃣ Login to ACR (for Docker build/push)
      - name: 🐳 Login to Azure Container Registry
        run: az acr login --name ${{ inputs.acr-name }}
        shell: bash

      # 7️⃣ Setup Docker Buildx
      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 8️⃣ Build and push Docker image
      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        id: build-push
        with:
          context: ./tc-cloudgames-solution
          file: ./tc-cloudgames-solution/${{ inputs.dockerfile-path }}
          push: true
          tags: |
            ${{ steps.build-vars.outputs.image-uri }}
            ${{ steps.build-vars.outputs.image-uri-latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # 9️⃣ Get Container App info
      - name: 🔎 Get Container App Info
        id: container-app
        run: |
          CONTAINER_APP_INFO=$(az containerapp list \
            --query "[?contains(name, '${{ inputs.service-name }}')].[name, resourceGroup]" -o tsv | head -1)
          if [ -z "$CONTAINER_APP_INFO" ]; then
            echo "Container App not found"; exit 1
          fi
          CONTAINER_APP_NAME=$(echo "$CONTAINER_APP_INFO" | awk '{print $1}')
          RESOURCE_GROUP=$(echo "$CONTAINER_APP_INFO" | awk '{print $2}')

          echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
          echo "resource-group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
        shell: bash

      # 🔟 Verify Image Exists in ACR Before Deploy
      - name: � Verify Image Exists in ACR Before Deploy
        run: |
          IMAGE_URI_LATEST="${{ steps.build-vars.outputs.image-uri-latest }}"
          
          echo "🔍 Verifying image exists in ACR before creating new revision..."
          echo "📦 Checking image: $IMAGE_URI_LATEST"
          
          # Wait for potential manifest propagation (ACR can have some delay)
          echo "⏳ Waiting 30 seconds for manifest propagation..."
          sleep 30
          
          # Verify the image exists in ACR before attempting deploy
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "🔍 Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES: Checking if image exists..."
            
            if az acr repository show-manifests \
              --name ${{ inputs.acr-name }} \
              --repository ${{ inputs.service-name }} \
              --query "[?contains(tags, 'latest')]" -o tsv > /dev/null 2>&1; then
              echo "✅ Image verified in ACR! Proceeding with deployment."
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "⏳ Image not found yet, waiting 15 seconds before retry..."
                sleep 15
              else
                echo "❌ ERROR: Image not found in ACR after $MAX_RETRIES attempts"
                echo "❌ Cannot proceed with deployment - image $IMAGE_URI_LATEST does not exist"
                exit 1
              fi
            fi
          done
        shell: bash

      # 1️⃣1️⃣ Wait for RBAC Propagation
      - name: ⏳ Wait for RBAC Propagation
        run: |
          echo "⏳ Waiting for RBAC permissions to propagate..."
          echo "🔍 Ensuring Container App System Identity has AcrPull access"
          echo "📋 This prevents 'UNAUTHORIZED: authentication required' errors"
          
          # Wait 2 minutes for RBAC propagation
          sleep 120
          
          echo "✅ RBAC propagation wait completed"
        shell: bash

      # 1️⃣2️⃣ Deploy to Azure Container App
      - name: 🚀 Deploy to Azure Container App
        uses: azure/container-apps-deploy-action@v2
        with:
          acrName: ${{ inputs.acr-name }}
          containerAppName: ${{ steps.container-app.outputs.container-app-name }}
          resourceGroup: ${{ steps.container-app.outputs.resource-group }}
          imageToDeploy: ${{ steps.build-vars.outputs.image-uri }}
          # Environment variables with Key Vault secret references
          # Note: secrets must exist in Container App (created via Terraform)
          environmentVariables: >-
            ASPNETCORE_ENVIRONMENT=Production
            ASPNETCORE_URLS=http://+:8080
            DB_HOST=secretref:db-host
            DB_PORT=secretref:db-port
            DB_NAME=secretref:db-name-users
            DB_USER=secretref:db-admin-login
            DB_PASSWORD=secretref:db-password
            DB_MAINTENANCE_NAME=secretref:db-name-maintenance
            DB_SCHEMA=secretref:db-schema
            DB_CONNECTION_TIMEOUT=secretref:db-connection-timeout
            CACHE_HOST=secretref:cache-host
            CACHE_PORT=secretref:cache-port
            CACHE_PASSWORD=secretref:cache-password
            CACHE_SECURE=secretref:cache-secure
            AZURE_SERVICEBUS_CONNECTIONSTRING=secretref:servicebus-connection-string
            AZURE_SERVICEBUS_AUTO_PROVISION=secretref:servicebus-auto-provision
            AZURE_SERVICEBUS_MAX_DELIVERY_COUNT=secretref:servicebus-max-delivery-count
            AZURE_SERVICEBUS_ENABLE_DEAD_LETTERING=secretref:servicebus-enable-dead-lettering
            AZURE_SERVICEBUS_AUTO_PURGE_ON_STARTUP=secretref:servicebus-auto-purge-on-startup
            AZURE_SERVICEBUS_USE_CONTROL_QUEUES=secretref:servicebus-use-control-queues

      # 1️⃣3️⃣ Get Container App URL
      - name: 🌐 Get Container App URL
        id: get-url
        run: |
          APP_URL=$(az containerapp show \
            --name "${{ steps.container-app.outputs.container-app-name }}" \
            --resource-group "${{ steps.container-app.outputs.resource-group }}" \
            --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "container-app-url=https://$APP_URL" >> $GITHUB_OUTPUT
          echo "🌐 Container App URL: https://$APP_URL"
        shell: bash

      # 1️⃣4️⃣ Health check
      - name: 🧪 Health Check
        shell: bash
        run: |
          HEALTH_URL="${{ steps.get-url.outputs.container-app-url }}/health"
          sleep 20
          for i in {1..3}; do
            if curl -fsS "$HEALTH_URL" > /dev/null 2>&1; then
              echo "✅ Health check passed!"
              exit 0
            fi
            sleep 15
          done
          echo "❌ Health check failed after 3 attempts"
          exit 1
