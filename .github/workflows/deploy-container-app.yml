name: üöÄ Deploy Container App

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      workspace-path:
        required: true
        type: string
      dockerfile-path:
        required: true
        type: string
      environment:
        required: true
        type: string
      acr-name:
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      container-app-name: ${{ steps.container-app.outputs.container-app-name }}
      container-app-url: ${{ steps.get-url.outputs.container-app-url }}
      image-tag: ${{ steps.build-vars.outputs.image-tag }}
      image-uri: ${{ steps.build-vars.outputs.image-uri }}
    steps:

      # 1Ô∏è‚É£ Prepare workspace
      - name: üìÇ Prepare workspace
        run: mkdir -p ${{ inputs.workspace-path }}

      # 2Ô∏è‚É£ Checkout repositories
      - name: üì• Checkout API repository
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.workspace-path }}

      - name: üì• Checkout shared repository
        uses: actions/checkout@v4
        with:
          repository: rdpresser/tc-cloudgames-common
          path: tc-cloudgames-solution/shared/common
          token: ${{ secrets.GITHUB_TOKEN }}

      # 3Ô∏è‚É£ Setup .NET
      - name: ‚öôÔ∏è Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 4Ô∏è‚É£ Azure Login
      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 5Ô∏è‚É£ Prepare Build Variables
      - name: üèóÔ∏è Prepare Build Variables
        id: build-vars
        run: |
          IMAGE_TAG="$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-8)"
          IMAGE_URI="${{ inputs.acr-name }}.azurecr.io/${{ inputs.service-name }}:${IMAGE_TAG}"
          IMAGE_URI_LATEST="${{ inputs.acr-name }}.azurecr.io/${{ inputs.service-name }}:latest"

          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image-uri-latest=$IMAGE_URI_LATEST" >> $GITHUB_OUTPUT
        shell: bash

      # 6Ô∏è‚É£ Login to ACR (for Docker build/push)
      - name: üê≥ Login to Azure Container Registry
        run: az acr login --name ${{ inputs.acr-name }}
        shell: bash

      # 7Ô∏è‚É£ Setup Docker Buildx
      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 8Ô∏è‚É£ Build and push Docker image
      - name: üèóÔ∏è Build and Push Docker Image
        uses: docker/build-push-action@v5
        id: build-push
        with:
          context: ./tc-cloudgames-solution
          file: ./tc-cloudgames-solution/${{ inputs.dockerfile-path }}
          push: true
          tags: |
            ${{ steps.build-vars.outputs.image-uri }}
            ${{ steps.build-vars.outputs.image-uri-latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # 9Ô∏è‚É£ Get Container App info
      - name: üîé Get Container App Info
        id: container-app
        run: |
          CONTAINER_APP_INFO=$(az containerapp list \
            --query "[?contains(name, '${{ inputs.service-name }}')].[name, resourceGroup]" -o tsv | head -1)
          if [ -z "$CONTAINER_APP_INFO" ]; then
            echo "Container App not found"; exit 1
          fi
          CONTAINER_APP_NAME=$(echo "$CONTAINER_APP_INFO" | awk '{print $1}')
          RESOURCE_GROUP=$(echo "$CONTAINER_APP_INFO" | awk '{print $2}')

          echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
          echo "resource-group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
        shell: bash

      # üîü Verify Image Exists in ACR Before Deploy
      - name: ÔøΩ Verify Image Exists in ACR Before Deploy
        run: |
          IMAGE_URI_LATEST="${{ steps.build-vars.outputs.image-uri-latest }}"
          
          echo "üîç Verifying image exists in ACR before creating new revision..."
          echo "üì¶ Checking image: $IMAGE_URI_LATEST"
          
          # Wait for potential manifest propagation (ACR can have some delay)
          echo "‚è≥ Waiting 30 seconds for manifest propagation..."
          sleep 30
          
          # Verify the image exists in ACR before attempting deploy
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "üîç Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES: Checking if image exists..."
            
            if az acr repository show-manifests \
              --name ${{ inputs.acr-name }} \
              --repository ${{ inputs.service-name }} \
              --query "[?contains(tags, 'latest')]" -o tsv > /dev/null 2>&1; then
              echo "‚úÖ Image verified in ACR! Proceeding with deployment."
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚è≥ Image not found yet, waiting 15 seconds before retry..."
                sleep 15
              else
                echo "‚ùå ERROR: Image not found in ACR after $MAX_RETRIES attempts"
                echo "‚ùå Cannot proceed with deployment - image $IMAGE_URI_LATEST does not exist"
                exit 1
              fi
            fi
          done
        shell: bash

      # 1Ô∏è‚É£1Ô∏è‚É£ Wait for RBAC Propagation
      - name: ‚è≥ Wait for RBAC Propagation
        run: |
          echo "‚è≥ Waiting for RBAC permissions to propagate..."
          echo "üîç Ensuring Container App System Identity has AcrPull access"
          echo "üìã This prevents 'UNAUTHORIZED: authentication required' errors"
          
          # Wait 2 minutes for RBAC propagation
          sleep 120
          
          echo "‚úÖ RBAC propagation wait completed"
        shell: bash

      # 1Ô∏è‚É£2Ô∏è‚É£ Configure Container App Registry for System Identity
      - name: üîß Configure Container App Registry Authentication
        run: |
          echo "ÔøΩ Configuring Container App to use System Identity for ACR access..."
          
          CONTAINER_APP_NAME="${{ steps.container-app.outputs.container-app-name }}"
          RESOURCE_GROUP="${{ steps.container-app.outputs.resource-group }}"
          ACR_NAME="${{ inputs.acr-name }}"
          ACR_SERVER="${ACR_NAME}.azurecr.io"
          
          # Remove any existing ACR registry configuration that might use credentials
          echo "üßπ Clearing any existing ACR configuration..."
          az containerapp registry remove \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --server "$ACR_SERVER" \
            --ignore-not-found || echo "No existing ACR configuration found"
          
          # Configure ACR access using System Identity (no credentials needed)
          echo "üîê Configuring ACR access using System Managed Identity..."
          az containerapp registry set \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --server "$ACR_SERVER" \
            --identity "system"
          
          echo "‚úÖ Container App configured to use System Identity for ACR access"
        shell: bash

      # 1Ô∏è‚É£3Ô∏è‚É£ Deploy to Azure Container App using Azure CLI
      - name: üöÄ Deploy to Azure Container App
        run: |
          echo "üöÄ Deploying Container App using System Managed Identity..."
          
          CONTAINER_APP_NAME="${{ steps.container-app.outputs.container-app-name }}"
          RESOURCE_GROUP="${{ steps.container-app.outputs.resource-group }}"
          IMAGE_URI="${{ steps.build-vars.outputs.image-uri }}"
          
          echo "üìã Container App: $CONTAINER_APP_NAME"
          echo "üìã Resource Group: $RESOURCE_GROUP"
          echo "üìã Image: $IMAGE_URI"
          
          # Update container app with new image and environment variables using System Identity
          echo "üîÑ Updating Container App with new revision..."
          az containerapp update \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --image "$IMAGE_URI" \
            --set-env-vars \
              ASPNETCORE_ENVIRONMENT=Production \
              ASPNETCORE_URLS=http://+:8080 \
              DB_HOST=secretref:db-host \
              DB_PORT=secretref:db-port \
              DB_NAME=secretref:db-name-users \
              DB_USER=secretref:db-admin-login \
              DB_PASSWORD=secretref:db-password \
              DB_MAINTENANCE_NAME=secretref:db-name-maintenance \
              DB_SCHEMA=secretref:db-schema \
              DB_CONNECTION_TIMEOUT=secretref:db-connection-timeout \
              CACHE_HOST=secretref:cache-host \
              CACHE_PORT=secretref:cache-port \
              CACHE_PASSWORD=secretref:cache-password \
              CACHE_SECURE=secretref:cache-secure \
              AZURE_SERVICEBUS_CONNECTIONSTRING=secretref:servicebus-connection-string \
              AZURE_SERVICEBUS_AUTO_PROVISION=secretref:servicebus-auto-provision \
              AZURE_SERVICEBUS_MAX_DELIVERY_COUNT=secretref:servicebus-max-delivery-count \
              AZURE_SERVICEBUS_ENABLE_DEAD_LETTERING=secretref:servicebus-enable-dead-lettering \
              AZURE_SERVICEBUS_AUTO_PURGE_ON_STARTUP=secretref:servicebus-auto-purge-on-startup \
              AZURE_SERVICEBUS_USE_CONTROL_QUEUES=secretref:servicebus-use-control-queues
          
          echo "‚úÖ Container App deployment completed successfully!"
          echo "üîç Checking deployment status..."
          
          # Verify the deployment
          DEPLOYMENT_STATUS=$(az containerapp revision list \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "[0].properties.healthState" -o tsv)
          
          echo "üìã Latest revision health state: $DEPLOYMENT_STATUS"
          
          if [ "$DEPLOYMENT_STATUS" = "Healthy" ]; then
            echo "‚úÖ Deployment successful - Container App is healthy!"
          else
            echo "‚ö†Ô∏è Deployment completed but health state is: $DEPLOYMENT_STATUS"
            echo "üîç Checking revision details..."
            az containerapp revision list \
              --name "$CONTAINER_APP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "[0].{name: name, healthState: properties.healthState, replicas: properties.replicas}" -o table
          fi
          
        shell: bash

      # 1Ô∏è‚É£4Ô∏è‚É£ Get Container App URL
      - name: üåê Get Container App URL
        id: get-url
        run: |
          APP_URL=$(az containerapp show \
            --name "${{ steps.container-app.outputs.container-app-name }}" \
            --resource-group "${{ steps.container-app.outputs.resource-group }}" \
            --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "container-app-url=https://$APP_URL" >> $GITHUB_OUTPUT
          echo "üåê Container App URL: https://$APP_URL"
        shell: bash

      # 1Ô∏è‚É£5Ô∏è‚É£ Health check
      - name: üß™ Health Check
        shell: bash
        run: |
          HEALTH_URL="${{ steps.get-url.outputs.container-app-url }}/health"
          sleep 20
          for i in {1..3}; do
            if curl -fsS "$HEALTH_URL" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              exit 0
            fi
            sleep 15
          done
          echo "‚ùå Health check failed after 3 attempts"
          exit 1
